// Code generated by protoc-gen-go.
// source: pb/dwork.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/dwork.proto

It has these top-level messages:
	Results
	WorkUnit
	ResultsSuccess
	WorkerID
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type Results struct {
	JobID    string `protobuf:"bytes,1,opt,name=JobID" json:"JobID,omitempty"`
	WorkID   int64  `protobuf:"varint,2,opt,name=WorkID" json:"WorkID,omitempty"`
	Found    bool   `protobuf:"varint,3,opt,name=Found" json:"Found,omitempty"`
	Location int64  `protobuf:"varint,4,opt,name=Location" json:"Location,omitempty"`
}

func (m *Results) Reset()                    { *m = Results{} }
func (m *Results) String() string            { return proto.CompactTextString(m) }
func (*Results) ProtoMessage()               {}
func (*Results) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Results) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *Results) GetWorkID() int64 {
	if m != nil {
		return m.WorkID
	}
	return 0
}

func (m *Results) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

func (m *Results) GetLocation() int64 {
	if m != nil {
		return m.Location
	}
	return 0
}

// The response message containing the greetings
// https://developers.google.com/protocol-buffers/docs/proto3
type WorkUnit struct {
	JobID     string `protobuf:"bytes,1,opt,name=JobID" json:"JobID,omitempty"`
	ID        int64  `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
	Offset    int64  `protobuf:"varint,3,opt,name=Offset" json:"Offset,omitempty"`
	Size      int64  `protobuf:"varint,4,opt,name=Size" json:"Size,omitempty"`
	Status    int64  `protobuf:"varint,5,opt,name=Status" json:"Status,omitempty"`
	Timestamp int64  `protobuf:"varint,6,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Code      string `protobuf:"bytes,7,opt,name=Code" json:"Code,omitempty"`
}

func (m *WorkUnit) Reset()                    { *m = WorkUnit{} }
func (m *WorkUnit) String() string            { return proto.CompactTextString(m) }
func (*WorkUnit) ProtoMessage()               {}
func (*WorkUnit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WorkUnit) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *WorkUnit) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *WorkUnit) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *WorkUnit) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *WorkUnit) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *WorkUnit) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *WorkUnit) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type ResultsSuccess struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *ResultsSuccess) Reset()                    { *m = ResultsSuccess{} }
func (m *ResultsSuccess) String() string            { return proto.CompactTextString(m) }
func (*ResultsSuccess) ProtoMessage()               {}
func (*ResultsSuccess) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResultsSuccess) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type WorkerID struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID" json:"UUID,omitempty"`
}

func (m *WorkerID) Reset()                    { *m = WorkerID{} }
func (m *WorkerID) String() string            { return proto.CompactTextString(m) }
func (*WorkerID) ProtoMessage()               {}
func (*WorkerID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *WorkerID) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func init() {
	proto.RegisterType((*Results)(nil), "pb.Results")
	proto.RegisterType((*WorkUnit)(nil), "pb.WorkUnit")
	proto.RegisterType((*ResultsSuccess)(nil), "pb.ResultsSuccess")
	proto.RegisterType((*WorkerID)(nil), "pb.WorkerID")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Dwork service

type DworkClient interface {
	// Sends a greeting
	GiveWork(ctx context.Context, in *WorkerID, opts ...grpc.CallOption) (*WorkUnit, error)
	ReceiveResults(ctx context.Context, in *Results, opts ...grpc.CallOption) (*ResultsSuccess, error)
}

type dworkClient struct {
	cc *grpc.ClientConn
}

func NewDworkClient(cc *grpc.ClientConn) DworkClient {
	return &dworkClient{cc}
}

func (c *dworkClient) GiveWork(ctx context.Context, in *WorkerID, opts ...grpc.CallOption) (*WorkUnit, error) {
	out := new(WorkUnit)
	err := grpc.Invoke(ctx, "/pb.Dwork/GiveWork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dworkClient) ReceiveResults(ctx context.Context, in *Results, opts ...grpc.CallOption) (*ResultsSuccess, error) {
	out := new(ResultsSuccess)
	err := grpc.Invoke(ctx, "/pb.Dwork/receiveResults", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dwork service

type DworkServer interface {
	// Sends a greeting
	GiveWork(context.Context, *WorkerID) (*WorkUnit, error)
	ReceiveResults(context.Context, *Results) (*ResultsSuccess, error)
}

func RegisterDworkServer(s *grpc.Server, srv DworkServer) {
	s.RegisterService(&_Dwork_serviceDesc, srv)
}

func _Dwork_GiveWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DworkServer).GiveWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Dwork/GiveWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DworkServer).GiveWork(ctx, req.(*WorkerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dwork_ReceiveResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Results)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DworkServer).ReceiveResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Dwork/ReceiveResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DworkServer).ReceiveResults(ctx, req.(*Results))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dwork_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Dwork",
	HandlerType: (*DworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GiveWork",
			Handler:    _Dwork_GiveWork_Handler,
		},
		{
			MethodName: "receiveResults",
			Handler:    _Dwork_ReceiveResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/dwork.proto",
}

func init() { proto.RegisterFile("pb/dwork.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x91, 0xcb, 0x4a, 0xfb, 0x40,
	0x14, 0xc6, 0x9b, 0xf4, 0x96, 0x9e, 0xff, 0x9f, 0x2c, 0x0e, 0x22, 0x43, 0x11, 0x29, 0x59, 0x05,
	0x17, 0x15, 0xec, 0x23, 0x18, 0x94, 0x88, 0x20, 0x4c, 0x0c, 0xae, 0x73, 0x99, 0xc0, 0x50, 0x9b,
	0x09, 0x99, 0x49, 0x05, 0x1f, 0xc8, 0xe7, 0x94, 0xb9, 0x24, 0xba, 0x71, 0xf7, 0xfd, 0x92, 0x6f,
	0xce, 0x77, 0x2e, 0x10, 0x76, 0xe5, 0x6d, 0xfd, 0x21, 0xfa, 0xe3, 0xbe, 0xeb, 0x85, 0x12, 0xe8,
	0x77, 0x65, 0xc4, 0x61, 0x4d, 0x99, 0x1c, 0xde, 0x95, 0xc4, 0x0b, 0x58, 0x3e, 0x89, 0x32, 0x4d,
	0x88, 0xb7, 0xf3, 0xe2, 0x0d, 0xb5, 0x80, 0x97, 0xb0, 0x7a, 0x13, 0xfd, 0x31, 0x4d, 0x88, 0xbf,
	0xf3, 0xe2, 0x39, 0x75, 0xa4, 0xdd, 0x0f, 0x62, 0x68, 0x6b, 0x32, 0xdf, 0x79, 0x71, 0x40, 0x2d,
	0xe0, 0x16, 0x82, 0x67, 0x51, 0x15, 0x8a, 0x8b, 0x96, 0x2c, 0x8c, 0x7f, 0xe2, 0xe8, 0xcb, 0x83,
	0x40, 0x3f, 0xce, 0x5b, 0xae, 0xfe, 0x08, 0x0b, 0xc1, 0x9f, 0x82, 0x7c, 0x1b, 0xfe, 0xd2, 0x34,
	0x92, 0x29, 0x93, 0x32, 0xa7, 0x8e, 0x10, 0x61, 0x91, 0xf1, 0x4f, 0xe6, 0x22, 0x8c, 0xd6, 0xde,
	0x4c, 0x15, 0x6a, 0x90, 0x64, 0x69, 0xbd, 0x96, 0xf0, 0x0a, 0x36, 0xaf, 0xfc, 0xc4, 0xa4, 0x2a,
	0x4e, 0x1d, 0x59, 0x99, 0x5f, 0x3f, 0x1f, 0x74, 0xa5, 0x7b, 0x51, 0x33, 0xb2, 0x36, 0x6d, 0x18,
	0x1d, 0xdd, 0x40, 0xe8, 0x76, 0x92, 0x0d, 0x55, 0xc5, 0xa4, 0x44, 0x02, 0x6b, 0x27, 0x4d, 0xbf,
	0x01, 0x1d, 0x31, 0xba, 0xb6, 0x33, 0xb1, 0x3e, 0x4d, 0x74, 0xad, 0x3c, 0x9f, 0x46, 0x32, 0xfa,
	0xae, 0x81, 0x65, 0xa2, 0x57, 0x8e, 0x31, 0x04, 0x8f, 0xfc, 0xcc, 0xb4, 0x19, 0xff, 0xef, 0xbb,
	0x72, 0x3f, 0x3e, 0xdb, 0x4e, 0xa4, 0x17, 0x13, 0xcd, 0xf0, 0x00, 0x61, 0xcf, 0x2a, 0xc6, 0xcf,
	0x6c, 0xbc, 0xcc, 0x3f, 0xed, 0x70, 0xb0, 0xc5, 0x5f, 0x30, 0x76, 0x31, 0x2b, 0x57, 0xe6, 0xa4,
	0x87, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xec, 0x6c, 0x3c, 0x74, 0xe4, 0x01, 0x00, 0x00,
}
